# syntax = docker/dockerfile:1.2

services:
  client:
    build:
      context: .
      dockerfile: ./client/Dockerfile
      args:
        NODE_ENV: production
        CLIENT_PORT: 81
    volumes:
      - ./client:/usr/src/app/client
      - /usr/src/app/node_modules
      - /usr/src/app/dist
    ports:
      - 81:81
    environment:
      NODE_ENV: production
      CLIENT_PORT: 81
      CDN_URL: http://localhost:81/ # need to be localhost to be accessible from browser
    command: ./node_modules/.bin/webpack serve --config client/webpack.js --compress --no-client-overlay --no-hot --no-live-reload --port 81 --allowed-hosts all

  server:
    build:
      context: .
      dockerfile: ./server/Dockerfile
      args:
        NODE_ENV: production
        PORT: 80
    volumes:
      - ./:/usr/src/app
      - /usr/src/app/node_modules
      - /usr/src/app/dist
    ports:
      - 80:80
    environment:
      NODE_ENV: production
      PORT: 80
      MONGODB_URI: mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@data:27017/chatbotdb?authSource=admin
      REDIS_URI: redis://default:${REDIS_PASSWORD}@cache:6379
      CLIENT_MANIFEST_URL: http://client:81/manifest.json # use container name to be accessible from another container
      FAVICON_URL: http://localhost:81/favicon.ico
      COOKIE_SECRET: ${COOKIE_SECRET}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    depends_on:
      client:
        condition: service_started
      data:
        condition: service_healthy
      cache:
        condition: service_healthy

  data:
    image: mongo:latest
    volumes:
      - ./data/mongodb_data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - 27017:27017
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 3

  cache:
    image: redis:latest
    volumes:
      - ./cache/redis_data:/data
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - 6379:6379
    command: redis-server --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 3
